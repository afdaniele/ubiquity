// Generated by CoffeeScript 2.5.1
(function() {
  var DEFAULT_TIMEOUT_SECS, Logger, ParameterType, QuantumStub, ShoeboxContent, ShoeboxIF;

  DEFAULT_TIMEOUT_SECS = 10;

  Logger = class Logger {
    constructor(name) {
      this._name = name;
    }

    info(message) {
      return console.log(`INFO:${this._message}`);
    }

    warn(message) {
      return console.warn(message);
    }

    error(message) {
      return console.error(message);
    }

  };

  ShoeboxContent = class ShoeboxContent {
    constructor() {}

  };

  QuantumStub = class QuantumStub {
    constructor() {}

  };

  ParameterType = (function() {
    var DEFAULT, KEYWORD, POSITIONAL, VAR_KEYWORD, VAR_POSITIONAL;

    class ParameterType {
      from_inspect_type(itype) {
        // TODO: Likely this is useless
        return null;
      }

    };

    // NOTE: This has to match the PB protocol
    DEFAULT = 0;

    POSITIONAL = 1;

    KEYWORD = 2;

    VAR_POSITIONAL = 3;

    VAR_KEYWORD = 4;

    return ParameterType;

  }).call(this);

  ShoeboxIF = class ShoeboxIF {
    constructor(name) {
      this._name = name;
      this._quanta = {};
      this._tunnels = {};
      this._objects = {};
      this._waves_in = {};
      this.__logger__ = new Logger(this.toString());
      //    TODO: semaphore here
      this._waves_in_lock = null;
      self._content = new ShoeboxContent();
      Object.defineProperties(this.prototype, {
        name: {
          get: function() {
            return this._name;
          }
        },
        quanta: {
          get: function() {
            return this._quanta;
          }
        },
        objects: {
          get: function() {
            return this._objects;
          }
        },
        content: {
          get: function() {
            return this._content;
          }
        },
        logger: {
          get: function() {
            return this.__logger__;
          }
        }
      });
    }

    register_quantum(obj/*: any */, quantum_id/*: null | number */ = null)/*: number */ {
      throw "NotImplementedError";
    }

    name_quantum(name/*: str */, quantum_id/*: number */) {
      throw "NotImplementedError";
    }

    add(name/*: str */, obj/*: any */) {
      throw "NotImplementedError";
    }

    attach(tunnel/*: TunnelIF */) {
      throw "NotImplementedError";
    }

    detach(tunnel/*: TunnelIF */) {
      throw "NotImplementedError";
    }

    wave_in(wave/*: WaveIF */) {
      throw "NotImplementedError";
    }

    wave_out(wave/*: WaveIF */) {
      throw "NotImplementedError";
    }

    wait_on(request_wave/*: string | WaveIF */, timeout/*: number */ = -1) {
      throw "NotImplementedError";
    }

    destroy() {
      throw "NotImplementedError";
    }

    serialize()/*: ShoeboxPB */ {
      throw "NotImplementedError";
    }

    deserialize(shoebox_pb/*: ShoeboxPB */)/*: ShoeboxIF */ {
      throw "NotImplementedError";
    }

    toString()/*: string */ {
      return `SB[${this.name}]`;
    }

    __str__()/*: string */ {
      return this.toString();
    }

  };

}).call(this);
