// Generated by CoffeeScript 2.5.1
(function() {
  var WebSocket, WebSocketClientTunnel, WebSocketServerTunnel, WebSocketTunnel;

  WebSocket = require('ws');

  WebSocketTunnel = class WebSocketTunnel {
    constructor() {}

    wave_in(wave) {
      console.log('Message received.');
      return console.log(wave);
    }

    wave_out(wave_pb) {
      this._send_wave(wave_pb);
      console.log('Message sent.');
      return console.log(wave_pb);
    }

  };

  WebSocketServerTunnel = class WebSocketServerTunnel extends WebSocketTunnel {
    constructor(bind_host/*: string */ = 'localhost', bind_port/*: number */ = 5005) {
      super();
      this._bind_host = bind_host;
      this._bind_port = bind_port;
      this._links = [];
      this._ws = new WebSocket.Server({
        port: 5005
      });
      this._ws.on('connection', this._connect);
    }

    _connect(ws/*: WebSocket */) {
      this._links.push(ws);
      return this._ws.on('close', this._client_disconnect);
    }

    _client_disconnect(ws/*: WebSocket */) {
      return this._links = this._links.filter(function(w) {
        return w !== ws;
      });
    }

    _send_wave(wave_raw/*: string */) {
      var _send, i, len, link, ref, results;
      _send = function(ws) {
        return ws.send(wave_raw);
      };
      ref = this._links;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        link = ref[i];
        results.push(_send(link));
      }
      return results;
    }

    __str__()/*: string */ {
      return `WS:${this._bind_host}:${this._bind_port}`;
    }

    toString()/*: string */ {
      return this.__str__();
    }

  };

  WebSocketClientTunnel = class WebSocketClientTunnel extends WebSocketTunnel {
    constructor(server_host/*: string */, server_port/*: number */ = 5005) {
      super();
      this._server_host = server_host;
      this._server_port = server_port;
      this._ws = new WebSocket(`ws://${this._server_host}:${this._server_port}`);
      this._ws.on('open', this._connect);
      this._ws.on('close', this._client_disconnect);
      this._ws.on('message', this._receive_wave);
    }

    _connect() {
      return console.log('Client Connected');
    }

    _client_disconnect(ws/*: WebSocket */) {
      return console.log('Client Disconnected');
    }

    _receive_wave(message/*: string */) {
      console.log(message);
      return super.wave_in(message);
    }

    _send_wave(wave_raw/*: string */) {
      return this._ws.send(wave_raw);
    }

    __str__()/*: string */ {
      return `WS:${this._server_host}:${this._server_port}`;
    }

    toString()/*: string */ {
      return this.__str__();
    }

  };

  
module.exports = {
  WebSocketClientTunnel: WebSocketClientTunnel,
  WebSocketServerTunnel: WebSocketServerTunnel
};
;

}).call(this);
